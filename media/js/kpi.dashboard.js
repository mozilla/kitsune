(function() {

function _makePercent(numerator, denominator) {
  return function(d) {
    return d[numerator] / d[denominator];
  };
}

function _makeIdentity(key) {
  return function(d) {
    return d[key];
  };
}

function init() {
  window.App = new KpiDashboard({
    el: document.getElementById('kpi-dash-app')
  });

  makeKPIGraph($('#kpi-vote'), [
    {
      'name': gettext('Article Votes: % Helpful'),
      'slug': 'wiki_percent',
      'func': _makePercent('kb_helpful', 'kb_votes')
    },
    {
      'name': gettext('Article Votes: % Helpful'),
      'slug': 'ans_percent',
      'func': _makePercent('ans_helpful', 'ans_votes')
    }
  ], {
    bucketMethods: {
      wiki_percent: 'average',
      ans_percent: 'average'
    }
  });

  makeKPIGraph($('#kpi-active-contributors'), [
    {
      name: gettext('en-US KB'),
      slug: 'en_us',
      func: _makeIdentity('en_us')
    },
    {
      name: gettext('non en-US KB'),
      slug: 'non_en_us',
      func: _makeIdentity('non_en_us')
    },
    {
      name: gettext('Support Forum'),
      slug: 'support_forum',
      func: _makeIdentity('support_forum')
    },
    {
      name: gettext('Army of Awesome'),
      slug: 'aoa',
      func: _makeIdentity('aoa')
    }
  ]);

  makeKPIGraph($('#kpi-ctr'), [
    {
      name: gettext('CTR %'),
      slug: 'ctr',
      func: _makePercent('clicks', 'searches')
    }
  ], {
    bucketMethods: {
      ctr: 'average',
    }
  });

  makeKPIGraph($('#kpi-visitors'), [
    {
      name: gettext('Visitors'),
      slug: 'visitors',
      func: _makeIdentity('visitors')
    }
  ]);

  makeKPIGraph($('#kpi-l10n'), [
    {
      name: gettext('L10n Coverage'),
      slug: 'l10n',
      // the api returns 0 to 100, we want 0.0 to 1.0.
      func: function(d) { return d['coverage'] / 100; }
    }
  ], {
    bucketMethods: {
      ctr: 'average'
    }
  });

}

// parseInt and _.map don't get along because parseInt takes a second arg.
// This doesn't have that problem.
function parseNum(n) {
  return parseInt(n, 10);
}

/* Take an array of datums and make a set of named x/y series, suitable
 * for Rickshaw. Each series is generated by one of the key functions.
 *
 * `keys` is an array of objects that define a name, a slug, and a
 * function to calculate data. Each data function will be used as a map
 * function on the datum objects to generate a series.
 */
function makeSeries(objects, descriptors) {
  var i, j;
  var datum, series = [];
  var split, date;

  for (i = 0; i < descriptors.length; i++) {
    var key = descriptors[i];
    series[i] = {
      name: key.name,
      slug: key.slug,
      data: _.map(objects, function(datum) {
        date = datum.date || datum.start;
        split = _.map(date.split('-'), parseNum);
        // The Data constructor takes months as 0 through 11. Wtf.
        date = +new Date(split[0], split[1] - 1, split[2]) / 1000;

        return {x: date, y: key.func(datum)};
      })
    };
  }

  // Rickshaw gets angry when its data isn't sorted.
  for (i = 0; i < descriptors.length; i++) {
    series[i].data.sort(function(a, b) { return a.x - b.x; });
  }

  return series;
}

function makeKPIGraph($container, descriptors, metadata) {
  $.getJSON($container.data('url'), function(data) {
    var series = makeSeries(data.objects, descriptors);

    var graph = new k.Graph($container, {
      data: {
        series: series
      },
      options: {
        legend: false,
        slider: true,
        bucket: true
      },
      graph: {
        width: 880,
        height: 300
      },
      metadata: metadata
    });
    graph.render();
  });
}

// Backbone View for the questions chart.

window.KpiDashboard = Backbone.View.extend({
  initialize: function() {
    // Create the models.
    this.questionsChart = new ChartModel([], {
      url: $(this.el).data('questions-url')
    });

    // Create the views.
    this.questionsView = new StockChartView({
      model: this.questionsChart,
      title: gettext('Questions'),
      percent: true,
      series: [{
        name: gettext('Questions'),
        type: 'area',
        yAxis: 1,
        approximation: 'sum',
        mapper: function(o) {
          return {
            x: Date.parse(o['date']),
            y: o['questions']
          };
        }
      }, {
        name: gettext('Solved'),
        numerator: 'solved',
        denominator: 'questions',
        tooltip: {
          ySuffix: '%',
          yDecimals: 1
        }
      }, {
        name: gettext('Responded in 24 hours'),
        numerator: 'responded_24',
        denominator: 'questions',
        tooltip: {
          ySuffix: '%',
          yDecimals: 1
        }
      }, {
        name: gettext('Responded in 72 hours'),
        numerator: 'responded_72',
        denominator: 'questions',
        tooltip: {
          ySuffix: '%',
          yDecimals: 1
        }
      }]
    });

    // Render the view.
    $(this.el)
      .prepend($('#kpi-legend-questions'))
      .prepend(this.questionsView.render().el);

    // Load up the model.
    this.questionsChart.fetch();
  }
});

$(init);

})();