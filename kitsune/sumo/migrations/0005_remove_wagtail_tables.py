# Generated by Django 4.2.16 on 2024-12-27
# Migration to remove all Wagtail-related tables and permissions

from django.db import migrations


def remove_wagtail_tables_and_permissions(apps, schema_editor):
    """Remove all Wagtail tables and associated permissions/content types."""
    
    # Get the database connection
    connection = schema_editor.connection
    
    # First, check for any foreign keys from non-Wagtail tables to Wagtail tables
    with connection.cursor() as cursor:
        cursor.execute("""
            SELECT 
                tc.table_name as from_table,
                kcu.column_name as from_column,
                ccu.table_name AS to_table
            FROM 
                information_schema.table_constraints AS tc 
                JOIN information_schema.key_column_usage AS kcu
                  ON tc.constraint_name = kcu.constraint_name
                  AND tc.table_schema = kcu.table_schema
                JOIN information_schema.constraint_column_usage AS ccu
                  ON ccu.constraint_name = tc.constraint_name
                  AND ccu.table_schema = tc.table_schema
            WHERE tc.constraint_type = 'FOREIGN KEY' 
                AND ccu.table_name LIKE 'wagtail%'
                AND tc.table_name NOT LIKE 'wagtail%';
        """)
        
        foreign_keys = cursor.fetchall()
        if foreign_keys:
            print("WARNING: Found foreign keys from non-Wagtail tables to Wagtail tables:")
            for fk in foreign_keys:
                print(f"  {fk[0]}.{fk[1]} -> {fk[2]}")
            raise Exception(
                "Cannot safely remove Wagtail tables due to foreign key dependencies from non-Wagtail tables. "
                "Please remove these foreign keys first."
            )
    
    # Find all Wagtail tables dynamically using LIKE pattern
    with connection.cursor() as cursor:
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name LIKE 'wagtail%'
            ORDER BY 
                -- Drop many-to-many junction tables first to avoid FK issues
                CASE WHEN table_name LIKE '%_groups' THEN 0 ELSE 1 END,
                -- Then drop child tables before parent tables
                table_name DESC;
        """)
        wagtail_tables = [row[0] for row in cursor.fetchall()]
    
    if not wagtail_tables:
        print("No Wagtail tables found to drop.")
    else:
        print(f"Found {len(wagtail_tables)} Wagtail tables to drop.")
    
    # Drop tables using raw SQL
    # We use CASCADE to handle foreign key constraints between Wagtail tables
    # The safety check above ensures no non-Wagtail tables will be affected
    tables_dropped = 0
    with connection.cursor() as cursor:
        for table_name in wagtail_tables:
            try:
                cursor.execute(f'DROP TABLE IF EXISTS {table_name} CASCADE;')
            except Exception as e:
                print(f'Error dropping table {table_name}: {e}')
                raise
            print(f'Dropped table: {table_name}')
            tables_dropped += 1
    
    # Clean up Wagtail permissions and content types
    Permission = apps.get_model('auth', 'Permission')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    
    # Delete all permissions for Wagtail content types using startswith
    # This catches all app labels like 'wagtailadmin', 'wagtailcore', 'wagtail_localize', etc.
    deleted_perms = Permission.objects.filter(
        content_type__app_label__startswith='wagtail'
    ).delete()
    total_perms_deleted = deleted_perms[0]
    
    if total_perms_deleted > 0:
        print(f'Deleted {total_perms_deleted} Wagtail permissions')
    
    # Delete all Wagtail content types
    deleted_ct = ContentType.objects.filter(
        app_label__startswith='wagtail'
    ).delete()
    total_ct_deleted = deleted_ct[0]
    
    if total_ct_deleted > 0:
        print(f'Deleted {total_ct_deleted} Wagtail content types')
    
    # Print summary
    print("\n" + "="*60)
    print("WAGTAIL REMOVAL SUMMARY:")
    print(f"  Tables dropped: {tables_dropped}")
    print(f"  Permissions deleted: {total_perms_deleted}")
    print(f"  Content types deleted: {total_ct_deleted}")
    print("="*60)


def reverse_remove_wagtail(apps, schema_editor):
    """
    Reversal would require reinstalling Wagtail and running its migrations.
    This is intentionally left as a no-op since we're removing Wagtail completely.
    """
    raise NotImplementedError(
        "Cannot reverse the removal of Wagtail tables. "
        "Please reinstall Wagtail and run its migrations if needed."
    )


class Migration(migrations.Migration):

    dependencies = [
        ('sumo', '0001_squashed_0004_delete_wagtaildocument'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.RunPython(
            remove_wagtail_tables_and_permissions,
            reverse_remove_wagtail,
        ),
    ]