@use '../../config' as c;
@use 'protocol' as p;

// Forms
//
// Forms are used throughout the system and can be arranged in several ways. The
// following is an example of how various components are combined.
//
// Markup: ../../../styleguide-examples/form.njk
//
// Weight: 3
//
// Style guide: forms
fieldset {
  margin: 0;
  padding: 0;
  border: none;
}

legend {
  margin: 0;
  padding: 1em 0 0.5em; // margin was collapsing strangely here.
  font-size: rem-calc(24);
  font-weight: var(--global-weight-semibold);
  color: var(--primary-heading-color);
}

// Input fields
//
// Help text can be added under the field with `<p class="help-text">` Help text
// should be be tied to the form field using the aria-describedby attribute and
// an ID. This will ensure that screen readers—will announce the help text when
// the user focuses the field.
//
// .has-disabled  - Indicates a disabled field. `disabled` should also be applied as an attribute to the field itself.
// .has-error     - Indiciates a field error.
// .has-warning     - Indiciates a field error.
// .has-success     - Indiciates a field error.
// .required - Indicates required state
// .inline-label - Make labels and fields appear side-by-side.
//
// Markup: ../../../styleguide-examples/field.njk
//
// Weight: 1
//
// Style guide: forms.field
label {
  display: block;
  margin-bottom: p.$spacing-sm;
  @include p.font-size(14px);
  color: var(--color-marketing-gray-07);

}

.field {
  position: relative;
  margin-bottom: p.$spacing-md;

  .error-text {
    display: none;
  }

  &.has-error .error-text {
    display: block;
    margin: p.$spacing-sm 0 0 0;
    color: var(--color-red-08);
    @include p.font-size(12px);
  }
}

textarea,
input[type='email'],
input[type='url'],
input[type='tel'],
input[type='password'],
input[type='search'],
input[type='text'],
input[type='number'],
input[type='date'],
input[type='time'] {
  appearance: none;
  position: relative;
  padding: 0 p.$spacing-sm;
  width: 100%;
  height: 40px;
  border: 2px solid var(--color-marketing-gray-05);
  border-radius: var(--global-radius);
  background-color: var(--color-white);
  color:#0c0c0d;
  outline:0;
  transition-duration:150ms;
  transition-property:border-color;
  @include p.font-size(16px);

  &:hover {
    border-color: var(--color-blue-07);
  }

  &:focus,
  .has-warning &,
  .has-error &,
  .has-success & {
    border-color: transparent;
  }

  &:focus {
    box-shadow: var(--focus-shadow);
  }

  .has-warning & {
    box-shadow: 0 0 0 4px rgba(c.color('yellow', '04'), 0.3), 0 0 0 2px c.color('yellow', '04'); // compliant colors
    // box-shadow: 0 0 0 4px rgba(215, 182, 0, 0.3), 0 0 0 2px rgb(215, 182, 0); // noncompliant colors
  }

  .has-success & {
    box-shadow: 0 0 0 4px rgba(c.color('green', '07'), 0.3), 0 0 0 2px c.color('green', '07'); // compliant colors
    // box-shadow: 0 0 0 4px rgba(63, 225, 176, 0.3), 0 0 0 2px var(--green-60); // noncompliant colors
  }

  .has-error & {
    box-shadow: 0 0 0 4px rgba(c.color('red', '08'), 0.4), 0 0 0 2px var(--color-red-08);
    // box-shadow: 0 0 0 4px rgba(255, 79, 94, 0.4), 0 0 0 2px var(--red-60);
  }

  .has-disabled &,
  &:disabled,
  &:disabled:hover,
  &:disabled:active {
    border-color: var(--color-marketing-gray-03);
    background-color: var(--color-marketing-gray-01);
    color: var(--color-marketing-gray-03);
    cursor: default;
  }
}

// Select
//
// .error     - Indiciates a field error.
// .required - Indicates required state
// .disabled  - Indicates a disabled field. `disabled` should also be applied as an attribute to the field itself.
// .has-focus - Indicates a :focus state.
//
// Markup: ../styleguide-components/field_select.hbs
//
// Weight: 2
//
// Style guide: forms.select
select {
  position: relative;
  padding-right: rem-calc(40);
  border-color: var(--select-border-color);
  background-image: c.svg-url('<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 18 10"><path fill="none" vector-effect="non-scaling-stroke" stroke="'+ #f00 +'" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" d="M1 1l8 8 8-8"/></svg>');
  background-color: transparent;
  background-position: top 14px right 14px;
  background-repeat: no-repeat;
  background-size: 12px 12px;
}

// Textarea
//
// .error     - Indiciates a field error.
// .required - Indicates required state
// .disabled  - Indicates a disabled field. `disabled` should also be applied as an attribute to the field itself.
// .has-focus - Indicates a :focus state.
//
// Markup: ../styleguide-components/field_textarea.hbs
//
// Weight: 3
//
// Style guide: forms.textarea

textarea {
  display: block;
  min-height: rem-calc(90);
}

// Checkboxes
//
// .error     - Indiciates a field error.
// .required - Indicates required state
// .disabled  - Indicates a disabled field. `disabled` should also be applied as an attribute to the field itself.
// .has-focus - Indicates a :focus state.
//
// Markup: ../styleguide-components/field_checkbox.hbs
//
// Weight: 4
//
// Style guide: forms.input-checkboxes

.checkbox {
  [type=checkbox] {
    position: absolute;
    left: -9999px;
  }

  label:before {
    display: inline-block;
    margin-right: 6px;
    margin-bottom: -3px;
    width: 14px;
    height: 14px;
    border: 1px solid var(--brand-color);
    vertical-align: baseline;
    content: "";
  }

  [type=checkbox]:checked + label:before,
  label.is-checked:before { // background, checked state
    z-index: 1;
    width: 16px;
    height: 16px;
    border: none;
    background-color: var(--brand-color);
    mask-image: url('#TODO#checkbox_selected');
    mask-position: center center;
    mask-repeat: no-repeat;
    mask-size: 18px 18px;
  }

  &.checkbox-only {
    label {
      display: block;
      margin: 0;
      width: 16px;
      height: 16px;
    }
  }
}

.radio-group,
.checkbox-group {
  .field:not(:last-child) {
    margin-bottom: rem-calc(10);
  }
}

// Radio Buttons
//
// .error     - Indiciates a field error.
// .disabled  - Indicates a disabled field. `disabled` should also be applied as an attribute to the field itself.
// .has-focus - Indicates a :focus state.
//
// Markup: ../styleguide-components/field_radio.hbs
//
// Weight: 5
//
// Style guide: forms.input-radio

.radio {
  [type=radio] {
    position: absolute;
    left: -9999px;
  }

  label {
    position: relative;
    padding-left: calc(var(--radio-size) * 1.4);

    &:before {
      position: absolute;
      top: 0;
      left: 0;
      z-index: 1;
      display: block;
      margin-right: 6px;
      width: var(--radio-size);
      height: var(--radio-size);
      border: none;
      background-color: var(--brand-color);
      background-position: top center;
      mask-image: url('#TODO#radio_empty');
      mask-repeat: no-repeat;
      mask-size: 100% 100%;
      vertical-align: top;
      content: "";
    }
  }

  [type=radio]:checked + label:before,
  label.is-checked:before { // background, checked state
    mask-image: url('#TODO#radio_selected');
  }
}


// Help Text
//
// Help text can be added under the field with `<p class="help-text">` Help text
// should be be tied to the form field using the aria-describedby attribute and
// an ID. This will ensure that screen readers—will announce the help text when
// the user focuses the field.
//
//
// Markup: ../styleguide-components/field_help_text.hbs
//
// Weight: 22
//
// Style guide: forms.help-text
.help-text {
  display: block;
  margin: p.$spacing-sm 0 0 0;
  @include p.font-size(12px);
}
