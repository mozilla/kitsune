# This is an example settings_local.py file. Rename it to settings_local.py
# and edit it to match your config. At the very least you need to edit the
# database password.

from kitsune.settings import *
import sys

INSTALLED_APPS = list(INSTALLED_APPS)
MIDDLEWARE_CLASSES = list(MIDDLEWARE_CLASSES)

DEBUG = True
SESSION_COOKIE_SECURE = False

# Allows you to run Kitsune without running Celery---all tasks
# will be done synchronously.
CELERY_ALWAYS_EAGER = True

# Allows you to specify waffle settings in the querystring.
WAFFLE_OVERRIDE = True

# Change this to True if you're going to be doing search-related
# work.
ES_LIVE_INDEXING = False

# Basic cache configuration for development.
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': 'localhost:11211',
        'PREFIX': 'sumo:',
    }
}

# Basic database configuration for development.
DATABASES = {
    'default': {
        'NAME': 'kitsune',
        'ENGINE': 'django.db.backends.mysql',
        'HOST': 'localhost',
        'USER': 'kitsune',
        'PASSWORD': '<YOUR_PASSWORD>',
        'OPTIONS': {'init_command': 'SET storage_engine=InnoDB'},
        'TEST_CHARSET': 'utf8',
        'TEST_COLLATION': 'utf8_unicode_ci',
    },
}

REDIS_BACKENDS = {
    'default': 'redis://localhost:6383?socket_timeout=0.5&db=0',
    'helpfulvotes': 'redis://localhost:6383?socket_timeout=0.5&db=1',
}

NUNJUCKS_PRECOMPILE_BIN = path('node_modules/.bin/nunjucks-precompile')

# Tells django-axes we aren't behind a reverse proxy.
AXES_BEHIND_REVERSE_PROXY = False

# Enable this to add more debugging in all pages. You'll also need to install
# the developer packages, listed in ``requirements/dev.txt``.
USE_DEBUG_TOOLBAR = False
# If the tests or syncdb are running, enabled the debug toolbar will cause
# problems, so detect both those cases.
#USE_DEBUG_TOOLBAR = 'test' not in sys.argv and 'syncdb' not in sys.argv and DEBUG

# Setup debug_toolbar if it is enabled.
if USE_DEBUG_TOOLBAR:
    # setup debug_toolbar
    INSTALLED_APPS += ['debug_toolbar']
    MIDDLEWARE_CLASSES += ['debug_toolbar.middleware.DebugToolbarMiddleware']

    class ContainsEverything(object):
        def __contains__(self, item):
            return True

    INTERNAL_IPS = ContainsEverything()

    DEBUG_TOOLBAR_CONFIG = {
        'SHOW_COLLAPSED': True,
    }
