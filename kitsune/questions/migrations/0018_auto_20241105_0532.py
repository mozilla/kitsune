# Generated by Django 4.2.16 on 2024-11-05 05:32
from django.db import migrations
from fuzzywuzzy import fuzz

SIMILARITY_THRESHOLD = 80


def curate_list_of_tags(apps, schema_editor):
    Tag = apps.get_model("taggit", "Tag")
    TaggedItem = apps.get_model("taggit", "TaggedItem")
    Question = apps.get_model("questions", "Question")
    ContentType = apps.get_model("contenttypes", "ContentType")

    orphaned_tags = Tag.objects.filter(taggit_taggeditem_items__isnull=True)
    orphaned_tags.delete()

    question_content_type = ContentType.objects.get_for_model(Question)
    archived_tag_ids = TaggedItem.objects.filter(
        content_type=question_content_type,
        object_id__in=Question.objects.filter(is_archived=True).values_list("id", flat=True),
    ).values_list("tag_id", flat=True)

    non_archived_tag_ids = TaggedItem.objects.filter(
        content_type=question_content_type,
        object_id__in=Question.objects.filter(is_archived=False).values_list("id", flat=True),
    ).values_list("tag_id", flat=True)

    exclusively_archived_tag_ids = set(archived_tag_ids) - set(non_archived_tag_ids)
    exclusively_archived_tags = Tag.objects.filter(id__in=exclusively_archived_tag_ids)
    exclusively_archived_tags.delete()

    def recursively_merge_tags(tags):
        merged_any = False
        for i, primary_tag in enumerate(tags):
            for secondary_tag in tags[i + 1 :]:
                similarity = fuzz.ratio(primary_tag.name, secondary_tag.name)
                if similarity >= SIMILARITY_THRESHOLD:
                    duplicate_conflicts = TaggedItem.objects.filter(
                        tag=secondary_tag,
                        object_id__in=TaggedItem.objects.filter(tag=primary_tag).values_list(
                            "object_id", flat=True
                        ),
                    )
                    duplicate_conflicts.delete()
                    TaggedItem.objects.filter(tag=secondary_tag).update(tag=primary_tag)
                    secondary_tag.delete()

                    print(f"Merged '{secondary_tag.name}' into '{primary_tag.name}'")
                    merged_any = True
                    # start over
                    break
            if merged_any:
                return recursively_merge_tags(list(Tag.objects.all().reverse()))
        return tags

    recursively_merge_tags(list(Tag.objects.all().reverse()))


def backwards(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ("questions", "0017_question_update_topic_counter"),
    ]

    operations = [migrations.RunPython(curate_list_of_tags, backwards)]
